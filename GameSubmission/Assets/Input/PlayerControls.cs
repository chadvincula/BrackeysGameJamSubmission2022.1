//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""f5fa597c-8935-4339-aab7-45a9e5a9bbb8"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""b1f82a84-a885-4549-a385-ddc18fd2a8ed"",
                    ""expectedControlType"": ""Digital"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""766108b9-1dd4-42ff-bcc5-ef3602382431"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grab"",
                    ""type"": ""Button"",
                    ""id"": ""1164a56b-1e8b-429a-aaf1-3923a052f1f1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""e6083f46-5590-4eaf-8300-3728bbc5f566"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Left/Right"",
                    ""id"": ""06e862c4-48d1-4e29-89ea-34279f628f7a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""fd7630d0-ded1-4c86-b3d8-8d38ea06b1ef"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e10fb994-f2c0-4375-b6a7-59f60d0bb9ae"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""998f93ff-f9f6-4067-95bd-8142c5bc7602"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""594650da-b489-4abe-8943-bf847ced9db2"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3fb67ee8-8cd2-4418-8893-e569827014fa"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DevShortcuts"",
            ""id"": ""69b4c5e8-5156-4c7d-ae2c-f7b6d9ee8ccf"",
            ""actions"": [
                {
                    ""name"": ""CompleteTaskOne"",
                    ""type"": ""Button"",
                    ""id"": ""175865df-1797-4f88-9613-1606dc009668"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CompleteTaskTwo"",
                    ""type"": ""Button"",
                    ""id"": ""790fe839-8fb6-44f9-9e6e-b156b4dda400"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CompleteTaskThree"",
                    ""type"": ""Button"",
                    ""id"": ""f811f24c-6682-4333-a8ec-d9a189a4a0b4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CompleteTaskFour"",
                    ""type"": ""Button"",
                    ""id"": ""52bd0c52-09f3-4048-b363-6586527ba3d1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CompleteTaskFive"",
                    ""type"": ""Button"",
                    ""id"": ""384fa2de-2e4d-4029-b7ed-2fda843e1904"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1df37eb8-d9da-4158-b59c-9f357e92665f"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CompleteTaskOne"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c31679f-eb45-4861-886e-8da64b361152"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CompleteTaskTwo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a6987a6-6161-4728-ac2e-62d058787833"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CompleteTaskThree"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1276e62b-9b58-4df6-b578-9711d20ec808"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CompleteTaskFour"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3a87966-ae49-4697-9dd9-9b0cc75cc9dd"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CompleteTaskFive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Grab = m_Player.FindAction("Grab", throwIfNotFound: true);
        m_Player_Interact = m_Player.FindAction("Interact", throwIfNotFound: true);
        // DevShortcuts
        m_DevShortcuts = asset.FindActionMap("DevShortcuts", throwIfNotFound: true);
        m_DevShortcuts_CompleteTaskOne = m_DevShortcuts.FindAction("CompleteTaskOne", throwIfNotFound: true);
        m_DevShortcuts_CompleteTaskTwo = m_DevShortcuts.FindAction("CompleteTaskTwo", throwIfNotFound: true);
        m_DevShortcuts_CompleteTaskThree = m_DevShortcuts.FindAction("CompleteTaskThree", throwIfNotFound: true);
        m_DevShortcuts_CompleteTaskFour = m_DevShortcuts.FindAction("CompleteTaskFour", throwIfNotFound: true);
        m_DevShortcuts_CompleteTaskFive = m_DevShortcuts.FindAction("CompleteTaskFive", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Grab;
    private readonly InputAction m_Player_Interact;
    public struct PlayerActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @Grab => m_Wrapper.m_Player_Grab;
        public InputAction @Interact => m_Wrapper.m_Player_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Grab.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGrab;
                @Grab.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGrab;
                @Grab.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGrab;
                @Interact.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Grab.started += instance.OnGrab;
                @Grab.performed += instance.OnGrab;
                @Grab.canceled += instance.OnGrab;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // DevShortcuts
    private readonly InputActionMap m_DevShortcuts;
    private IDevShortcutsActions m_DevShortcutsActionsCallbackInterface;
    private readonly InputAction m_DevShortcuts_CompleteTaskOne;
    private readonly InputAction m_DevShortcuts_CompleteTaskTwo;
    private readonly InputAction m_DevShortcuts_CompleteTaskThree;
    private readonly InputAction m_DevShortcuts_CompleteTaskFour;
    private readonly InputAction m_DevShortcuts_CompleteTaskFive;
    public struct DevShortcutsActions
    {
        private @PlayerControls m_Wrapper;
        public DevShortcutsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @CompleteTaskOne => m_Wrapper.m_DevShortcuts_CompleteTaskOne;
        public InputAction @CompleteTaskTwo => m_Wrapper.m_DevShortcuts_CompleteTaskTwo;
        public InputAction @CompleteTaskThree => m_Wrapper.m_DevShortcuts_CompleteTaskThree;
        public InputAction @CompleteTaskFour => m_Wrapper.m_DevShortcuts_CompleteTaskFour;
        public InputAction @CompleteTaskFive => m_Wrapper.m_DevShortcuts_CompleteTaskFive;
        public InputActionMap Get() { return m_Wrapper.m_DevShortcuts; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DevShortcutsActions set) { return set.Get(); }
        public void SetCallbacks(IDevShortcutsActions instance)
        {
            if (m_Wrapper.m_DevShortcutsActionsCallbackInterface != null)
            {
                @CompleteTaskOne.started -= m_Wrapper.m_DevShortcutsActionsCallbackInterface.OnCompleteTaskOne;
                @CompleteTaskOne.performed -= m_Wrapper.m_DevShortcutsActionsCallbackInterface.OnCompleteTaskOne;
                @CompleteTaskOne.canceled -= m_Wrapper.m_DevShortcutsActionsCallbackInterface.OnCompleteTaskOne;
                @CompleteTaskTwo.started -= m_Wrapper.m_DevShortcutsActionsCallbackInterface.OnCompleteTaskTwo;
                @CompleteTaskTwo.performed -= m_Wrapper.m_DevShortcutsActionsCallbackInterface.OnCompleteTaskTwo;
                @CompleteTaskTwo.canceled -= m_Wrapper.m_DevShortcutsActionsCallbackInterface.OnCompleteTaskTwo;
                @CompleteTaskThree.started -= m_Wrapper.m_DevShortcutsActionsCallbackInterface.OnCompleteTaskThree;
                @CompleteTaskThree.performed -= m_Wrapper.m_DevShortcutsActionsCallbackInterface.OnCompleteTaskThree;
                @CompleteTaskThree.canceled -= m_Wrapper.m_DevShortcutsActionsCallbackInterface.OnCompleteTaskThree;
                @CompleteTaskFour.started -= m_Wrapper.m_DevShortcutsActionsCallbackInterface.OnCompleteTaskFour;
                @CompleteTaskFour.performed -= m_Wrapper.m_DevShortcutsActionsCallbackInterface.OnCompleteTaskFour;
                @CompleteTaskFour.canceled -= m_Wrapper.m_DevShortcutsActionsCallbackInterface.OnCompleteTaskFour;
                @CompleteTaskFive.started -= m_Wrapper.m_DevShortcutsActionsCallbackInterface.OnCompleteTaskFive;
                @CompleteTaskFive.performed -= m_Wrapper.m_DevShortcutsActionsCallbackInterface.OnCompleteTaskFive;
                @CompleteTaskFive.canceled -= m_Wrapper.m_DevShortcutsActionsCallbackInterface.OnCompleteTaskFive;
            }
            m_Wrapper.m_DevShortcutsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CompleteTaskOne.started += instance.OnCompleteTaskOne;
                @CompleteTaskOne.performed += instance.OnCompleteTaskOne;
                @CompleteTaskOne.canceled += instance.OnCompleteTaskOne;
                @CompleteTaskTwo.started += instance.OnCompleteTaskTwo;
                @CompleteTaskTwo.performed += instance.OnCompleteTaskTwo;
                @CompleteTaskTwo.canceled += instance.OnCompleteTaskTwo;
                @CompleteTaskThree.started += instance.OnCompleteTaskThree;
                @CompleteTaskThree.performed += instance.OnCompleteTaskThree;
                @CompleteTaskThree.canceled += instance.OnCompleteTaskThree;
                @CompleteTaskFour.started += instance.OnCompleteTaskFour;
                @CompleteTaskFour.performed += instance.OnCompleteTaskFour;
                @CompleteTaskFour.canceled += instance.OnCompleteTaskFour;
                @CompleteTaskFive.started += instance.OnCompleteTaskFive;
                @CompleteTaskFive.performed += instance.OnCompleteTaskFive;
                @CompleteTaskFive.canceled += instance.OnCompleteTaskFive;
            }
        }
    }
    public DevShortcutsActions @DevShortcuts => new DevShortcutsActions(this);
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnGrab(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface IDevShortcutsActions
    {
        void OnCompleteTaskOne(InputAction.CallbackContext context);
        void OnCompleteTaskTwo(InputAction.CallbackContext context);
        void OnCompleteTaskThree(InputAction.CallbackContext context);
        void OnCompleteTaskFour(InputAction.CallbackContext context);
        void OnCompleteTaskFive(InputAction.CallbackContext context);
    }
}
